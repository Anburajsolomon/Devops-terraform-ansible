pipeline {
    agent any

    stages {
        stage('Initialize Terraform') {
            steps {
                sh 'terraform init'
            }
        }
/*
        stage('Security Testing for Terraform') {
            steps {
                // Run tfspec tests
                sh 'tfsec'
            }
        }
*/
        stage('Apply Terraform') {
            steps {
                sh 'terraform apply -auto-approve'
            }
        }

        stage('Get Server IP Address') {
            steps {
                script {
                    def serverIP = sh(
                        script: 'terraform output server_ip',
                        returnStatus: true
                    ).trim()
                    currentBuild.description = "Server IP: $serverIP"
                    // Set an environment variable to be used by InSpec
                    env.REMOTE_SERVER_IP = serverIP
                }
            }
        }
             
        stage('Wait for Deployment') {
            steps {
                sleep 10
            }
        }

        

        stage('Run Ansible Playbook') {
            steps {
                sh 'ansible-playbook -i /tmp/inv -u ec2-user -b --become-method sudo web.yaml'
            }
        }

        stage('Final Check for Ansible') {
            steps {
                // Run InSpec tests
                sh "inspec exec web_controls.rb -t ssh://ec2-user@${env.REMOTE_SERVER_IP}"
            }
        }
    }

    post {
        failure {
            // If any previous stage fails, mark the build as unstable
            unstable("Security testing or deployment stage failed.")
        }
    }
}
